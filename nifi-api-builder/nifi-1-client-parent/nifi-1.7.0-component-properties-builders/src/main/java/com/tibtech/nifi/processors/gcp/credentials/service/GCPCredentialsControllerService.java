package com.tibtech.nifi.processors.gcp.credentials.service;

import groovy.lang.Closure;
import groovy.lang.DelegatesTo;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

public final class GCPCredentialsControllerService {
  /**
   * The component type name.
   */
  public static final String COMPONENT_TYPE = "org.apache.nifi.processors.gcp.credentials.service.GCPCredentialsControllerService";

  /**
   * If true, uses Google Application Default Credentials, which checks the GOOGLE_APPLICATION_CREDENTIALS environment variable for a filepath to a service account JSON key, the config generated by the gcloud sdk, the App Engine service account, and the Compute Engine service account.
   */
  public static final String APPLICATION_DEFAULT_CREDENTIALS_PROPERTY = "application-default-credentials";

  /**
   * If true, uses Google Compute Engine Credentials of the Compute Engine VM Instance which NiFi is running on.
   */
  public static final String COMPUTE_ENGINE_CREDENTIALS_PROPERTY = "compute-engine-credentials";

  /**
   * Path to a file containing a Service Account key file in JSON format.
   */
  public static final String SERVICE_ACCOUNT_JSON_FILE_PROPERTY = "service-account-json-file";

  /**
   * The raw JSON containing a Service Account keyfile.
   */
  public static final String SERVICE_ACCOUNT_JSON_PROPERTY = "service-account-json";

  private final Map<String, String> properties;

  public GCPCredentialsControllerService() {
    this.properties = new HashMap<>();
  }

  public GCPCredentialsControllerService(final Map<String, String> properties) {
    this.properties = new HashMap<>(properties);
  }

  /**
   * If true, uses Google Application Default Credentials, which checks the GOOGLE_APPLICATION_CREDENTIALS environment variable for a filepath to a service account JSON key, the config generated by the gcloud sdk, the App Engine service account, and the Compute Engine service account.
   */
  public final String getApplicationDefaultCredentials() {
    return properties.get(APPLICATION_DEFAULT_CREDENTIALS_PROPERTY);
  }

  /**
   * If true, uses Google Application Default Credentials, which checks the GOOGLE_APPLICATION_CREDENTIALS environment variable for a filepath to a service account JSON key, the config generated by the gcloud sdk, the App Engine service account, and the Compute Engine service account.
   */
  public final GCPCredentialsControllerService setApplicationDefaultCredentials(
      final String applicationDefaultCredentials) {
    properties.put(APPLICATION_DEFAULT_CREDENTIALS_PROPERTY, applicationDefaultCredentials);
    return this;
  }

  /**
   * If true, uses Google Application Default Credentials, which checks the GOOGLE_APPLICATION_CREDENTIALS environment variable for a filepath to a service account JSON key, the config generated by the gcloud sdk, the App Engine service account, and the Compute Engine service account.
   */
  public final GCPCredentialsControllerService removeApplicationDefaultCredentials() {
    properties.remove(APPLICATION_DEFAULT_CREDENTIALS_PROPERTY);
    return this;
  }

  /**
   * If true, uses Google Compute Engine Credentials of the Compute Engine VM Instance which NiFi is running on.
   */
  public final String getComputeEngineCredentials() {
    return properties.get(COMPUTE_ENGINE_CREDENTIALS_PROPERTY);
  }

  /**
   * If true, uses Google Compute Engine Credentials of the Compute Engine VM Instance which NiFi is running on.
   */
  public final GCPCredentialsControllerService setComputeEngineCredentials(
      final String computeEngineCredentials) {
    properties.put(COMPUTE_ENGINE_CREDENTIALS_PROPERTY, computeEngineCredentials);
    return this;
  }

  /**
   * If true, uses Google Compute Engine Credentials of the Compute Engine VM Instance which NiFi is running on.
   */
  public final GCPCredentialsControllerService removeComputeEngineCredentials() {
    properties.remove(COMPUTE_ENGINE_CREDENTIALS_PROPERTY);
    return this;
  }

  /**
   * Path to a file containing a Service Account key file in JSON format.
   */
  public final String getServiceAccountJsonFile() {
    return properties.get(SERVICE_ACCOUNT_JSON_FILE_PROPERTY);
  }

  /**
   * Path to a file containing a Service Account key file in JSON format.
   */
  public final GCPCredentialsControllerService setServiceAccountJsonFile(
      final String serviceAccountJsonFile) {
    properties.put(SERVICE_ACCOUNT_JSON_FILE_PROPERTY, serviceAccountJsonFile);
    return this;
  }

  /**
   * Path to a file containing a Service Account key file in JSON format.
   */
  public final GCPCredentialsControllerService removeServiceAccountJsonFile() {
    properties.remove(SERVICE_ACCOUNT_JSON_FILE_PROPERTY);
    return this;
  }

  /**
   * The raw JSON containing a Service Account keyfile.
   */
  public final String getServiceAccountJson() {
    return properties.get(SERVICE_ACCOUNT_JSON_PROPERTY);
  }

  /**
   * The raw JSON containing a Service Account keyfile.
   */
  public final GCPCredentialsControllerService setServiceAccountJson(
      final String serviceAccountJson) {
    properties.put(SERVICE_ACCOUNT_JSON_PROPERTY, serviceAccountJson);
    return this;
  }

  /**
   * The raw JSON containing a Service Account keyfile.
   */
  public final GCPCredentialsControllerService removeServiceAccountJson() {
    properties.remove(SERVICE_ACCOUNT_JSON_PROPERTY);
    return this;
  }

  public final String getDynamicProperty(final String name) {
    return properties.get(name);
  }

  public final GCPCredentialsControllerService setDynamicProperty(final String name,
      final String value) {
    properties.put(name, value);
    return this;
  }

  public final GCPCredentialsControllerService removeDynamicProperty(final String name) {
    properties.remove(name);
    return this;
  }

  public final Map<String, String> build() {
    return properties;
  }

  public static final Map<String, String> build(
      final Function<GCPCredentialsControllerService, GCPCredentialsControllerService> configurator) {
    return configurator.apply(new GCPCredentialsControllerService()).build();
  }

  public static final Map<String, String> build(
      @DelegatesTo(strategy = Closure.DELEGATE_ONLY, value = GCPCredentialsControllerService.class) final Closure<GCPCredentialsControllerService> closure) {
    return build(c -> {
      final Closure<com.tibtech.nifi.processors.gcp.credentials.service.GCPCredentialsControllerService> code = closure.rehydrate(c, com.tibtech.nifi.processors.gcp.credentials.service.GCPCredentialsControllerService.class, com.tibtech.nifi.processors.gcp.credentials.service.GCPCredentialsControllerService.class);
      code.setResolveStrategy(Closure.DELEGATE_ONLY);
      code.call();
      return c;
    } );
  }

  public static final Map<String, String> update(final Map<String, String> properties,
      final Function<GCPCredentialsControllerService, GCPCredentialsControllerService> configurator) {
    return configurator.apply(new GCPCredentialsControllerService(properties)).build();
  }

  public static final Map<String, String> update(final Map<String, String> properties,
      @DelegatesTo(strategy = Closure.DELEGATE_ONLY, value = GCPCredentialsControllerService.class) final Closure<GCPCredentialsControllerService> closure) {
    return update(properties, c -> {
      final Closure<com.tibtech.nifi.processors.gcp.credentials.service.GCPCredentialsControllerService> code = closure.rehydrate(c, com.tibtech.nifi.processors.gcp.credentials.service.GCPCredentialsControllerService.class, com.tibtech.nifi.processors.gcp.credentials.service.GCPCredentialsControllerService.class);
      code.setResolveStrategy(Closure.DELEGATE_ONLY);
      code.call();
      return c;
    } );
  }
}
