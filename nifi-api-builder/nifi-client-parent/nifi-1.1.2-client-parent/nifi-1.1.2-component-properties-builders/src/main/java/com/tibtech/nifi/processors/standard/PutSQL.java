package com.tibtech.nifi.processors.standard;

import groovy.lang.Closure;
import groovy.lang.DelegatesTo;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

public final class PutSQL {
  /**
   * The component type name.
   */
  public static final String COMPONENT_TYPE = "org.apache.nifi.processors.standard.PutSQL";

  /**
   * Specifies the JDBC Connection Pool to use in order to convert the JSON message to a SQL statement. The Connection Pool is necessary in order to determine the appropriate database column types.
   */
  public static final String JDBC_CONNECTION_POOL_PROPERTY = "JDBC Connection Pool";

  /**
   * If true, when a FlowFile is consumed by this Processor, the Processor will first check the fragment.identifier and fragment.count attributes of that FlowFile. If the fragment.count value is greater than 1, the Processor will not process any FlowFile with that fragment.identifier until all are available; at that point, it will process all FlowFiles with that fragment.identifier as a single transaction, in the order specified by the FlowFiles' fragment.index attributes. This Provides atomicity of those SQL statements. If this value is false, these attributes will be ignored and the updates will occur independent of one another.
   */
  public static final String SUPPORT_FRAGMENTED_TRANSACTIONS_PROPERTY = "Support Fragmented Transactions";

  /**
   * If the <Support Fragmented Transactions> property is set to true, specifies how long to wait for all FlowFiles for a particular fragment.identifier attribute to arrive before just transferring all of the FlowFiles with that identifier to the 'failure' relationship
   */
  public static final String TRANSACTION_TIMEOUT_PROPERTY = "Transaction Timeout";

  /**
   * The preferred number of FlowFiles to put to the database in a single transaction
   */
  public static final String BATCH_SIZE_PROPERTY = "Batch Size";

  /**
   * If true, any key that is automatically generated by the database will be added to the FlowFile that generated it using the sql.generate.key attribute. This may result in slightly slower performance and is not supported by all databases.
   */
  public static final String OBTAIN_GENERATED_KEYS_PROPERTY = "Obtain Generated Keys";

  private final Map<String, String> properties = new HashMap<String, String>();

  /**
   * Specifies the JDBC Connection Pool to use in order to convert the JSON message to a SQL statement. The Connection Pool is necessary in order to determine the appropriate database column types.
   */
  public final String getJdbcConnectionPool() {
    return properties.get(JDBC_CONNECTION_POOL_PROPERTY);
  }

  /**
   * Specifies the JDBC Connection Pool to use in order to convert the JSON message to a SQL statement. The Connection Pool is necessary in order to determine the appropriate database column types.
   */
  public final PutSQL setJdbcConnectionPool(final String jdbcConnectionPool) {
    properties.put(JDBC_CONNECTION_POOL_PROPERTY, jdbcConnectionPool);
    return this;
  }

  /**
   * Specifies the JDBC Connection Pool to use in order to convert the JSON message to a SQL statement. The Connection Pool is necessary in order to determine the appropriate database column types.
   */
  public final PutSQL removeJdbcConnectionPool() {
    properties.remove(JDBC_CONNECTION_POOL_PROPERTY);
    return this;
  }

  /**
   * If true, when a FlowFile is consumed by this Processor, the Processor will first check the fragment.identifier and fragment.count attributes of that FlowFile. If the fragment.count value is greater than 1, the Processor will not process any FlowFile with that fragment.identifier until all are available; at that point, it will process all FlowFiles with that fragment.identifier as a single transaction, in the order specified by the FlowFiles' fragment.index attributes. This Provides atomicity of those SQL statements. If this value is false, these attributes will be ignored and the updates will occur independent of one another.
   */
  public final String getSupportFragmentedTransactions() {
    return properties.get(SUPPORT_FRAGMENTED_TRANSACTIONS_PROPERTY);
  }

  /**
   * If true, when a FlowFile is consumed by this Processor, the Processor will first check the fragment.identifier and fragment.count attributes of that FlowFile. If the fragment.count value is greater than 1, the Processor will not process any FlowFile with that fragment.identifier until all are available; at that point, it will process all FlowFiles with that fragment.identifier as a single transaction, in the order specified by the FlowFiles' fragment.index attributes. This Provides atomicity of those SQL statements. If this value is false, these attributes will be ignored and the updates will occur independent of one another.
   */
  public final PutSQL setSupportFragmentedTransactions(final String supportFragmentedTransactions) {
    properties.put(SUPPORT_FRAGMENTED_TRANSACTIONS_PROPERTY, supportFragmentedTransactions);
    return this;
  }

  /**
   * If true, when a FlowFile is consumed by this Processor, the Processor will first check the fragment.identifier and fragment.count attributes of that FlowFile. If the fragment.count value is greater than 1, the Processor will not process any FlowFile with that fragment.identifier until all are available; at that point, it will process all FlowFiles with that fragment.identifier as a single transaction, in the order specified by the FlowFiles' fragment.index attributes. This Provides atomicity of those SQL statements. If this value is false, these attributes will be ignored and the updates will occur independent of one another.
   */
  public final PutSQL removeSupportFragmentedTransactions() {
    properties.remove(SUPPORT_FRAGMENTED_TRANSACTIONS_PROPERTY);
    return this;
  }

  /**
   * If the <Support Fragmented Transactions> property is set to true, specifies how long to wait for all FlowFiles for a particular fragment.identifier attribute to arrive before just transferring all of the FlowFiles with that identifier to the 'failure' relationship
   */
  public final String getTransactionTimeout() {
    return properties.get(TRANSACTION_TIMEOUT_PROPERTY);
  }

  /**
   * If the <Support Fragmented Transactions> property is set to true, specifies how long to wait for all FlowFiles for a particular fragment.identifier attribute to arrive before just transferring all of the FlowFiles with that identifier to the 'failure' relationship
   */
  public final PutSQL setTransactionTimeout(final String transactionTimeout) {
    properties.put(TRANSACTION_TIMEOUT_PROPERTY, transactionTimeout);
    return this;
  }

  /**
   * If the <Support Fragmented Transactions> property is set to true, specifies how long to wait for all FlowFiles for a particular fragment.identifier attribute to arrive before just transferring all of the FlowFiles with that identifier to the 'failure' relationship
   */
  public final PutSQL removeTransactionTimeout() {
    properties.remove(TRANSACTION_TIMEOUT_PROPERTY);
    return this;
  }

  /**
   * The preferred number of FlowFiles to put to the database in a single transaction
   */
  public final String getBatchSize() {
    return properties.get(BATCH_SIZE_PROPERTY);
  }

  /**
   * The preferred number of FlowFiles to put to the database in a single transaction
   */
  public final PutSQL setBatchSize(final String batchSize) {
    properties.put(BATCH_SIZE_PROPERTY, batchSize);
    return this;
  }

  /**
   * The preferred number of FlowFiles to put to the database in a single transaction
   */
  public final PutSQL removeBatchSize() {
    properties.remove(BATCH_SIZE_PROPERTY);
    return this;
  }

  /**
   * If true, any key that is automatically generated by the database will be added to the FlowFile that generated it using the sql.generate.key attribute. This may result in slightly slower performance and is not supported by all databases.
   */
  public final String getObtainGeneratedKeys() {
    return properties.get(OBTAIN_GENERATED_KEYS_PROPERTY);
  }

  /**
   * If true, any key that is automatically generated by the database will be added to the FlowFile that generated it using the sql.generate.key attribute. This may result in slightly slower performance and is not supported by all databases.
   */
  public final PutSQL setObtainGeneratedKeys(final String obtainGeneratedKeys) {
    properties.put(OBTAIN_GENERATED_KEYS_PROPERTY, obtainGeneratedKeys);
    return this;
  }

  /**
   * If true, any key that is automatically generated by the database will be added to the FlowFile that generated it using the sql.generate.key attribute. This may result in slightly slower performance and is not supported by all databases.
   */
  public final PutSQL removeObtainGeneratedKeys() {
    properties.remove(OBTAIN_GENERATED_KEYS_PROPERTY);
    return this;
  }

  public final String getDynamicProperty(final String name) {
    return properties.get(name);
  }

  public final PutSQL setDynamicProperty(final String name, final String value) {
    properties.put(name, value);
    return this;
  }

  public final PutSQL removeDynamicProperty(final String name) {
    properties.remove(name);
    return this;
  }

  public final Map<String, String> build() {
    return properties;
  }

  public static final Map<String, String> build(final Function<PutSQL, PutSQL> configurator) {
    return configurator.apply(new PutSQL()).build();
  }

  public static final Map<String, String> build(@DelegatesTo(strategy = Closure.DELEGATE_ONLY, value = PutSQL.class) final Closure<PutSQL> closure) {
    return build(c -> {
      final Closure<com.tibtech.nifi.processors.standard.PutSQL> code = closure.rehydrate(c, com.tibtech.nifi.processors.standard.PutSQL.class, com.tibtech.nifi.processors.standard.PutSQL.class);
      code.setResolveStrategy(Closure.DELEGATE_ONLY);
      code.call();
      return c;
    } );
  }
}
