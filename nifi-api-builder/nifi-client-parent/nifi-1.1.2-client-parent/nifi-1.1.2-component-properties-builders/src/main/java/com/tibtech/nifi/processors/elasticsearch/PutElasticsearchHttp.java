package com.tibtech.nifi.processors.elasticsearch;

import groovy.lang.Closure;
import groovy.lang.DelegatesTo;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

public final class PutElasticsearchHttp {
  /**
   * The component type name.
   */
  public static final String COMPONENT_TYPE = "org.apache.nifi.processors.elasticsearch.PutElasticsearchHttp";

  /**
   * Elasticsearch URL which will be connected to, including scheme (http, e.g.), host, and port. The default port for the REST API is 9200.
   */
  public static final String ELASTICSEARCH_HTTP_URL_PROPERTY = "elasticsearch-http-url";

  /**
   * The SSL Context Service used to provide client certificate information for TLS/SSL connections. This service only applies if the Elasticsearch endpoint(s) have been secured with TLS/SSL.
   */
  public static final String SSL_CONTEXT_SERVICE_PROPERTY = "SSL Context Service";

  /**
   * Username to access the Elasticsearch cluster
   */
  public static final String USERNAME_PROPERTY = "Username";

  /**
   * Password to access the Elasticsearch cluster
   */
  public static final String PASSWORD_PROPERTY = "Password";

  /**
   * Max wait time for the connection to the Elasticsearch REST API.
   */
  public static final String ELASTICSEARCH_HTTP_CONNECT_TIMEOUT_PROPERTY = "elasticsearch-http-connect-timeout";

  /**
   * Max wait time for a response from the Elasticsearch REST API.
   */
  public static final String ELASTICSEARCH_HTTP_RESPONSE_TIMEOUT_PROPERTY = "elasticsearch-http-response-timeout";

  /**
   * The name of the FlowFile attribute containing the identifier for the document. If the Index Operation is "index", this property may be left empty or evaluate to an empty value, in which case the document's identifier will be auto-generated by Elasticsearch. For all other Index Operations, the attribute must evaluate to a non-empty value.
   */
  public static final String PUT_ES_ID_ATTR_PROPERTY = "put-es-id-attr";

  /**
   * The name of the index to insert into
   */
  public static final String PUT_ES_INDEX_PROPERTY = "put-es-index";

  /**
   * The type of this document (used by Elasticsearch for indexing and searching)
   */
  public static final String PUT_ES_TYPE_PROPERTY = "put-es-type";

  /**
   * Specifies the character set of the document data.
   */
  public static final String CHARACTER_SET_PROPERTY = "Character Set";

  /**
   * The preferred number of flow files to put to the database in a single transaction. Note that the contents of the flow files will be stored in memory until the bulk operation is performed. Also the results should be returned in the same order the flow files were received.
   */
  public static final String PUT_ES_BATCH_SIZE_PROPERTY = "put-es-batch-size";

  /**
   * The type of the operation used to index (index, update, upsert, delete)
   */
  public static final String PUT_ES_INDEX_OP_PROPERTY = "put-es-index-op";

  private final Map<String, String> properties = new HashMap<String, String>();

  /**
   * Elasticsearch URL which will be connected to, including scheme (http, e.g.), host, and port. The default port for the REST API is 9200.
   */
  public final String getElasticsearchHttpUrl() {
    return properties.get(ELASTICSEARCH_HTTP_URL_PROPERTY);
  }

  /**
   * Elasticsearch URL which will be connected to, including scheme (http, e.g.), host, and port. The default port for the REST API is 9200.
   */
  public final PutElasticsearchHttp setElasticsearchHttpUrl(final String elasticsearchHttpUrl) {
    properties.put(ELASTICSEARCH_HTTP_URL_PROPERTY, elasticsearchHttpUrl);
    return this;
  }

  /**
   * Elasticsearch URL which will be connected to, including scheme (http, e.g.), host, and port. The default port for the REST API is 9200.
   */
  public final PutElasticsearchHttp removeElasticsearchHttpUrl() {
    properties.remove(ELASTICSEARCH_HTTP_URL_PROPERTY);
    return this;
  }

  /**
   * The SSL Context Service used to provide client certificate information for TLS/SSL connections. This service only applies if the Elasticsearch endpoint(s) have been secured with TLS/SSL.
   */
  public final String getSslContextService() {
    return properties.get(SSL_CONTEXT_SERVICE_PROPERTY);
  }

  /**
   * The SSL Context Service used to provide client certificate information for TLS/SSL connections. This service only applies if the Elasticsearch endpoint(s) have been secured with TLS/SSL.
   */
  public final PutElasticsearchHttp setSslContextService(final String sslContextService) {
    properties.put(SSL_CONTEXT_SERVICE_PROPERTY, sslContextService);
    return this;
  }

  /**
   * The SSL Context Service used to provide client certificate information for TLS/SSL connections. This service only applies if the Elasticsearch endpoint(s) have been secured with TLS/SSL.
   */
  public final PutElasticsearchHttp removeSslContextService() {
    properties.remove(SSL_CONTEXT_SERVICE_PROPERTY);
    return this;
  }

  /**
   * Username to access the Elasticsearch cluster
   */
  public final String getUsername() {
    return properties.get(USERNAME_PROPERTY);
  }

  /**
   * Username to access the Elasticsearch cluster
   */
  public final PutElasticsearchHttp setUsername(final String username) {
    properties.put(USERNAME_PROPERTY, username);
    return this;
  }

  /**
   * Username to access the Elasticsearch cluster
   */
  public final PutElasticsearchHttp removeUsername() {
    properties.remove(USERNAME_PROPERTY);
    return this;
  }

  /**
   * Password to access the Elasticsearch cluster
   */
  public final String getPassword() {
    return properties.get(PASSWORD_PROPERTY);
  }

  /**
   * Password to access the Elasticsearch cluster
   */
  public final PutElasticsearchHttp setPassword(final String password) {
    properties.put(PASSWORD_PROPERTY, password);
    return this;
  }

  /**
   * Password to access the Elasticsearch cluster
   */
  public final PutElasticsearchHttp removePassword() {
    properties.remove(PASSWORD_PROPERTY);
    return this;
  }

  /**
   * Max wait time for the connection to the Elasticsearch REST API.
   */
  public final String getElasticsearchHttpConnectTimeout() {
    return properties.get(ELASTICSEARCH_HTTP_CONNECT_TIMEOUT_PROPERTY);
  }

  /**
   * Max wait time for the connection to the Elasticsearch REST API.
   */
  public final PutElasticsearchHttp setElasticsearchHttpConnectTimeout(final String elasticsearchHttpConnectTimeout) {
    properties.put(ELASTICSEARCH_HTTP_CONNECT_TIMEOUT_PROPERTY, elasticsearchHttpConnectTimeout);
    return this;
  }

  /**
   * Max wait time for the connection to the Elasticsearch REST API.
   */
  public final PutElasticsearchHttp removeElasticsearchHttpConnectTimeout() {
    properties.remove(ELASTICSEARCH_HTTP_CONNECT_TIMEOUT_PROPERTY);
    return this;
  }

  /**
   * Max wait time for a response from the Elasticsearch REST API.
   */
  public final String getElasticsearchHttpResponseTimeout() {
    return properties.get(ELASTICSEARCH_HTTP_RESPONSE_TIMEOUT_PROPERTY);
  }

  /**
   * Max wait time for a response from the Elasticsearch REST API.
   */
  public final PutElasticsearchHttp setElasticsearchHttpResponseTimeout(final String elasticsearchHttpResponseTimeout) {
    properties.put(ELASTICSEARCH_HTTP_RESPONSE_TIMEOUT_PROPERTY, elasticsearchHttpResponseTimeout);
    return this;
  }

  /**
   * Max wait time for a response from the Elasticsearch REST API.
   */
  public final PutElasticsearchHttp removeElasticsearchHttpResponseTimeout() {
    properties.remove(ELASTICSEARCH_HTTP_RESPONSE_TIMEOUT_PROPERTY);
    return this;
  }

  /**
   * The name of the FlowFile attribute containing the identifier for the document. If the Index Operation is "index", this property may be left empty or evaluate to an empty value, in which case the document's identifier will be auto-generated by Elasticsearch. For all other Index Operations, the attribute must evaluate to a non-empty value.
   */
  public final String getPutEsIdAttr() {
    return properties.get(PUT_ES_ID_ATTR_PROPERTY);
  }

  /**
   * The name of the FlowFile attribute containing the identifier for the document. If the Index Operation is "index", this property may be left empty or evaluate to an empty value, in which case the document's identifier will be auto-generated by Elasticsearch. For all other Index Operations, the attribute must evaluate to a non-empty value.
   */
  public final PutElasticsearchHttp setPutEsIdAttr(final String putEsIdAttr) {
    properties.put(PUT_ES_ID_ATTR_PROPERTY, putEsIdAttr);
    return this;
  }

  /**
   * The name of the FlowFile attribute containing the identifier for the document. If the Index Operation is "index", this property may be left empty or evaluate to an empty value, in which case the document's identifier will be auto-generated by Elasticsearch. For all other Index Operations, the attribute must evaluate to a non-empty value.
   */
  public final PutElasticsearchHttp removePutEsIdAttr() {
    properties.remove(PUT_ES_ID_ATTR_PROPERTY);
    return this;
  }

  /**
   * The name of the index to insert into
   */
  public final String getPutEsIndex() {
    return properties.get(PUT_ES_INDEX_PROPERTY);
  }

  /**
   * The name of the index to insert into
   */
  public final PutElasticsearchHttp setPutEsIndex(final String putEsIndex) {
    properties.put(PUT_ES_INDEX_PROPERTY, putEsIndex);
    return this;
  }

  /**
   * The name of the index to insert into
   */
  public final PutElasticsearchHttp removePutEsIndex() {
    properties.remove(PUT_ES_INDEX_PROPERTY);
    return this;
  }

  /**
   * The type of this document (used by Elasticsearch for indexing and searching)
   */
  public final String getPutEsType() {
    return properties.get(PUT_ES_TYPE_PROPERTY);
  }

  /**
   * The type of this document (used by Elasticsearch for indexing and searching)
   */
  public final PutElasticsearchHttp setPutEsType(final String putEsType) {
    properties.put(PUT_ES_TYPE_PROPERTY, putEsType);
    return this;
  }

  /**
   * The type of this document (used by Elasticsearch for indexing and searching)
   */
  public final PutElasticsearchHttp removePutEsType() {
    properties.remove(PUT_ES_TYPE_PROPERTY);
    return this;
  }

  /**
   * Specifies the character set of the document data.
   */
  public final String getCharacterSet() {
    return properties.get(CHARACTER_SET_PROPERTY);
  }

  /**
   * Specifies the character set of the document data.
   */
  public final PutElasticsearchHttp setCharacterSet(final String characterSet) {
    properties.put(CHARACTER_SET_PROPERTY, characterSet);
    return this;
  }

  /**
   * Specifies the character set of the document data.
   */
  public final PutElasticsearchHttp removeCharacterSet() {
    properties.remove(CHARACTER_SET_PROPERTY);
    return this;
  }

  /**
   * The preferred number of flow files to put to the database in a single transaction. Note that the contents of the flow files will be stored in memory until the bulk operation is performed. Also the results should be returned in the same order the flow files were received.
   */
  public final String getPutEsBatchSize() {
    return properties.get(PUT_ES_BATCH_SIZE_PROPERTY);
  }

  /**
   * The preferred number of flow files to put to the database in a single transaction. Note that the contents of the flow files will be stored in memory until the bulk operation is performed. Also the results should be returned in the same order the flow files were received.
   */
  public final PutElasticsearchHttp setPutEsBatchSize(final String putEsBatchSize) {
    properties.put(PUT_ES_BATCH_SIZE_PROPERTY, putEsBatchSize);
    return this;
  }

  /**
   * The preferred number of flow files to put to the database in a single transaction. Note that the contents of the flow files will be stored in memory until the bulk operation is performed. Also the results should be returned in the same order the flow files were received.
   */
  public final PutElasticsearchHttp removePutEsBatchSize() {
    properties.remove(PUT_ES_BATCH_SIZE_PROPERTY);
    return this;
  }

  /**
   * The type of the operation used to index (index, update, upsert, delete)
   */
  public final String getPutEsIndexOp() {
    return properties.get(PUT_ES_INDEX_OP_PROPERTY);
  }

  /**
   * The type of the operation used to index (index, update, upsert, delete)
   */
  public final PutElasticsearchHttp setPutEsIndexOp(final String putEsIndexOp) {
    properties.put(PUT_ES_INDEX_OP_PROPERTY, putEsIndexOp);
    return this;
  }

  /**
   * The type of the operation used to index (index, update, upsert, delete)
   */
  public final PutElasticsearchHttp removePutEsIndexOp() {
    properties.remove(PUT_ES_INDEX_OP_PROPERTY);
    return this;
  }

  public final String getDynamicProperty(final String name) {
    return properties.get(name);
  }

  public final PutElasticsearchHttp setDynamicProperty(final String name, final String value) {
    properties.put(name, value);
    return this;
  }

  public final PutElasticsearchHttp removeDynamicProperty(final String name) {
    properties.remove(name);
    return this;
  }

  public final Map<String, String> build() {
    return properties;
  }

  public static final Map<String, String> build(final Function<PutElasticsearchHttp, PutElasticsearchHttp> configurator) {
    return configurator.apply(new PutElasticsearchHttp()).build();
  }

  public static final Map<String, String> build(@DelegatesTo(strategy = Closure.DELEGATE_ONLY, value = PutElasticsearchHttp.class) final Closure<PutElasticsearchHttp> closure) {
    return build(c -> {
      final Closure<com.tibtech.nifi.processors.elasticsearch.PutElasticsearchHttp> code = closure.rehydrate(c, com.tibtech.nifi.processors.elasticsearch.PutElasticsearchHttp.class, com.tibtech.nifi.processors.elasticsearch.PutElasticsearchHttp.class);
      code.setResolveStrategy(Closure.DELEGATE_ONLY);
      code.call();
      return c;
    } );
  }
}
